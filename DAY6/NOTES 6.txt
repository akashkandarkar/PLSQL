create or replace type emp_address as object
	(street varchar2(20),city varchar2(20),country varchar2(20));

create table Person (pid number,pname  varchar2(20),address emp_address);

insert into person values (1,'priti',emp_address('hinjewadi','pune','India'));


insert into person values (2,'riti',emp_address('hinjewadi phase','pune','India'));

select * from person

select p.address.city from person p where pid=1;


update person set address = emp_add

;ljsdg;jlSDGV,.M;SLJKDG;Lssvress('bavdhan','pune','india') where pid =1;

declare 
add emp_address;
begin
	add:=emp_address('aaa','bbb','ccc');
	update person set address = add where pid=1;
end;
---------------------------------------------------------------------------------------
MEMBER FUNCTION
create or replace type emp_address as object
	(street varchar2(20),city varchar2(20),country varchar2(20),member function getCity return varchar2);

create type body emp_address as 
	member function getcity return varchar2 is
	begin
		return city;
	end;
end;

select p.address.getCity() from person p where pid=1;


---------------------------------------------------------------------------------------
ARRAY

create type phone_no as varray(5) of number;

create table emp_v (empid number, ename varchar2(20),phone phone_no);

insert into emp_v values (1,'priti',phone_no(12334,123423,23525));


insert into emp_v values (2,'riti',phone_no(0286358,9635916,92836508));

select * from emp_v;

declare
	t_phone phone_no;
begin
	select phone into t_phone from emp_v where empid=1;
	
	for x in 1..t_phone.count
	loop
		dbms_output.put_line('phone no val ='|| t_phone(x));
	end loop;
	dbms_output.put_line('first phone no=' || t_phone(t_phone.first));
	dbms_output.put_line('last phone no=' || t_phone(t_phone.last));
	dbms_output.put_line('second phone no=' || t_phone.next(t_phone.first));
end;
---------------------------------------------------------------------------------------
CURSOR + ARRAY


create type abc1 as object(data1 varchar2 (20),data2 varchar2(20));

create type phone_no1 as varray(5) of abc1;

create table emp_v1(empid number,ename varchar2(20),phone phone_no1);

insert into emp_v1 values (1,'AAA',phone_no1(abc1('aaa','bbb'),abc1('xyz','cvb')));

insert into emp_v1 values (2,'ddd',phone_no1(abc1('ffghf','dfhsdfh'),abc1('fhmd','dfndn')));

declare 
	t_phone phone_no1;
	cursor c1 is select * from emp_v1;
begin
	for y in c1
	loop
		select phone into t_phone from emp_v1 where empid=y.empid;
		for x in 1..t_phone.count
		loop
			dbms_output.put_line('phone no data1>> ' ||t_phone(x).data1|| '   data2 >> '||t_phone(x).data2);
		end loop;
	end loop;
end;

------------------------------------------------------------------------------------------------------------------

create or replace procedure forInsert(empno number, v_phone phone_no1) as
	begin
	insert into emp_v1 values (4,'aljfhd',v_phone);
	end;

	declare
		v_phone phone_no1;
	begin
		v_phone := phone_no1(abc1('qqq','qqqqqqq'),abc1('wwww','eeeee'));
		forInsert(4,v_phone);
	end;



create or replace procedure forUpdate(p_empno number, v_phone phone_no1) as
	begin
		update emp_v1 set phone=v_phone where empid=p_empno;
	end;

	declare
		t_phone phone_no1;
	begin
		t_phone := phone_no1(abc1('qqq','qqqqqqq'),abc1('wwww','eeeee'));
		forUpdate(1,t_phone);
	end;

HARDCODED
-----------------------------------------------------------------------------------------------------------
create or replace procedure forModify(p_empid number, p_phone in out phone_no1) as
	var number;
begin
	var:=p_phone.count;
	p_phone.extend(1);
	p_phone(var+1) :=abc1('demo','demopl');
	update emp_v1 set phone=p_phone where empid= p_empid;
	
end;


declare
	t_phone phone_no1;
begin
	select phone into t_phone from emp_v1 where empid=1;
	
	forModify(1,t_phone);
end;



PARAMETERIZED
-----------------------------------------------------------------------------------------------------------
create or replace procedure forModify(p_empid number, p_phone in out phone_no1,p_data1 varchar2,p_data2 varchar2) as
	var number;
begin
	var:=p_phone.count;
	p_phone.extend(1);
	
	p_phone(var+1) :=abc1(p_data1,p_data2);
	update emp_v1 set phone=p_phone where empid= p_empid;
	
end;


declare
	t_phone phone_no1;
begin
	select phone into t_phone from emp_v1 where empid=2;
	
	forModify(2,t_phone,'123abc','123xyz');
end;


NESTED TABLE 
------------------------------------------------------------------------------------------------------------
create or replace type vehicle as object (vid number, vname varchar2(20));

create or replace type vehicle_tab as table of vehicle;

create table person_veh(pid number,pname varchar2(20), vehicle_details vehicle_tab) nested table vehicle_details store as vehicle_details_tab;


insert into person_veh values(1,'xyz',vehicle_tab(vehicle(1,'apache'),vehicle(2,'gtr')));

UPDATE WHOLE ROW IN NESTED
--------------------------------------------------------------------------------------------------------------
declare 
	new_vehicle vehicle_tab;
begin
	new_vehicle:=vehicle_tab(vehicle(1,'firstveh'),vehicle(1,'firstveh'));
	update person_veh set vehicle_details=new_vehicle where pid=1;
	dbms_output.put_line('updated');
end;

FETCHING NESTED VALUES
------------------------------------------------------------------------------------------------------------
declare
	l_name person_veh.pname%type;
	l_vehicle person_veh.vehicle_details%type;
	
	cursor get_data is select pname,vehicle_details from person_veh;
begin
	open get_data;
		loop
			fetch get_data into l_name,l_vehicle;
			exit when get_data%notfound;
			dbms_output.put_line('person: '||l_name );
			for x in 1..l_vehicle.count
				loop
					dbms_output.put_line(l_vehicle(x).vname);
				end loop;
		end loop;
	close get_data;
end;



UPDATE WHOLE ROW IN NESTED
-----------------------------------------------------------------------------------------------------------------
/////the (select vehicle_details from person_veh where pid=1)


update the (select vehicle_details from person_veh where pid=1)
set vname='new vehicle' where vid=1;

insert into the (select vehicle_details from person_veh where pid=1) 
values (vehicle(2,'pannigale'));


delete from the (select vehicle_details from person_veh where pid=1)
where vid=1;




TRIGGERS
-------------------------------------------------------------------------------------------------------------------------

create trigger tr_update_sal after update on emp

begin
	dbms_output.put_line('sal is updated from trigger');
end;

update emp set sal=sal+1000 where empno=7839;



FOR EVERY MODIFIED ROW
--------------------------------
create trigger tr_update_sal after update on emp
for each row
begin
	dbms_output.put_line('sal is updated from trigger');
end;

update emp set sal=sal+1000;


INSERTING/UPDATEING/DELETING
--------------------------------
create or reaplace trigger tr_update_sal after update or insert or delete on emp
for each row

begin
	if inserting then
	dbms_output.put_line('inserting');
	elsif updating then
	dbms_output.put_line('updating');
	elsif  then
	dbms_output.put_line('deleting');
	end if;
end;

TRIGGER FOR INSERT INTO ANOTHER TABLE 
------------------------------------------------------

create table sal_details(empno number,sal number);

create or replace trigger tr_update_sal after update
on emp
	for each row
begin
	insert into sal_details values (:old.empno,:new.sal);
	dbms_output.put_line('added in sal_details');
end;



TRIGGER FOR INSERT INTO ANOTHER TABLE  NO REPETATION
--------------------------------------------------------------------------

create table sal_details(empno number,sal number);

create or replace trigger tr_update_sal after update
on emp
	for each row
when(old.sal<>new.sal)
begin
	insert into sal_details values (:old.empno,:new.sal);
	dbms_output.put_line('added in sal_details');
end;

TRIGGER COMPILATION ( ALTER )
--------------------------------------------------------------------------
alter trigger tr_update_sal compile;



TRIGGER DELETE ( DROP )
--------------------------------------------------------------------------
drop trigger tr_update_sal;



SYS_REFCURSOR
--------------------------------------------------------------------------


create or replace procedure ref_demo(c1 out sys_refcursor) as
begin
	open c1 for select ename,sal from emp;
end;


declare
	a sys_refcursor;
	l_name emp.ename%type;
	l_sal emp.sal%type;
begin
	ref_demo(a);
		loop
			fetch a into l_name,l_sal;	
			exit when a%notfound;
			dbms_output.put_line('name'||l_name||'sal'||l_sal);
			
		end loop;
end;