Exceptions

Practice 1

•Create a table named MESSAGES (err_message VARCHAR2(250))
•Write a PL/SQL block that accepts a salary value from a user and displays name of the employee having the salary value, on the screen. 
• If the salary entered returns more than one row, handle the exception with an appropriate Exception handler and insert into the MESSAGES table the message “ More than one employee with salary of <input salary>”
•If the salary entered does not return any  rows, handle the exception with an appropriate Exception handler and insert into the MESSAGES table the message “ No employee with salary of < input salary>”
•If the salary entered returns only one row, insert into the MESSAGES table the employees name 
•Handle any other exception with an appropriate Exception handler and insert into the MESSAGES table the message “ Some other error occurred”
1>>>>>>>>>>>>>>>>>>>>>
declare
	name emp.ename%type;
	salary emp.sal%type;
	too_row exception;

begin
	salary:=&num1;
	select ename into name from emp where sal=salary;
	dbms_output.put_line(name);
exception

when too_many_rows then
dbms_output.put_line('TOO many rows');
when no_data_found then
dbms_output.put_line('Entered salary not available!!!!'||salary);
when others then
insert into MESSAGES values ('Some other error occurred');
	
end;



Practice 2

•	Write a PL/SQL block that accepts all the column values for departments table as user inputs and inserts a record in the departments table. The block should give a name DUPLICATE_DEPT to the error for duplicate value of the primary key, department_id. (Use pragma EXCEPTION_INIT) The block should write a handler for handling the exception fired when a duplicated value is entered for department_id. The handler should have code for displaying an appropriate message on the screen when DUPLICATE_DEPT is fired.


 DEPTNO  DNAME          LOC


	dname :=&dname;
	dloc:=&dloc;
	


exception

when too_many_rows then
dbms_output.put_line('TOO many rows');
when no_data_found then
dbms_output.put_line('Entered salary not available!!!!'||salary);
when others then
insert into MESSAGES values ('Some other error occurred');
*/

declare
	did dept.deptno%type;
	id dept.deptno%type;
	dname dept.dname%type;
	dloc dept.loc%type;
	DUPLICATE_DEPT exception;
	pragma exception_init(DUPLICATE_DEPT,-00001);
begin
	did:=&did;
	dname:='&dname';
	dloc:='&dloc';
	
	insert into dept  values(did,dname,dloc);
exception
when DUPLICATE_DEPT then
dbms_output.put_line('entered id already exists');
	
end;




Practice 3

•	Write a PL/SQL BLOCK to check for more than one President Job in the “employees” table. Create a user defined exception named DUPLICATE_PRESIDENT that should be raised when more than one President is found in the “employees” table. The block should handle the exception by displaying a message “MORE THAN ONE PRESIDENT” on the screen.

-01422

declare
	job_ck emp.job%type;
	DUPLICATE_PRESIDENT exception;
	c number;
begin
	select count(*) into c from emp where job='PRESIDENT';
	if c>1 then
		raise DUPLICATE_PRESIDENT;
	end if;
	
exception
	when DUPLICATE_PRESIDENT then
	dbms_output.put_line('MORE THAN ONE PRESIDENT');
end;


Practice 4
•	Write a PL/SQL block that accepts the employee_id of two employees as two user inputs empno1 and empno2. If empno1 exists in the “employees” table, then the block increases the salary of the employee by 10%. If empno2 exists in the “employees” table then the block increases his salary by 20%. The block should raise and handle the errors if empno1 or empno2 or both do not exist, by displaying the appropriate messages. Note that if empno1 does not exist but empno2 exists then the salary of empno2 must be increased. Also when both empno1 and empno2 do not exist then the error must be handled by the block.

declare
	emp1 emp.empno%type;
	emp2 emp.empno%type;
	v_emp emp%rowtype;
	sal1 number;
	sal2 number;
	sal3 number;
	
	
begin
	emp1:=&num1;
	emp2:=&num2;
	
	select sal into sal1 from emp where empno=emp1 or empno=emp2;
	begin
		select sal into sal2 from emp where empno=emp1;
		update emp set sal=sal+1000 where empno=emp1;

	exception
		when no_data_found then
		dbms_output.put_line(emp1||'>>NO SUCH EMPLOYEE NUMBER');
		begin
			select sal into sal3 from emp where empno=emp2;
			update emp set sal=sal+2000 where empno=emp2;
		exception
			when no_data_found then
			dbms_output.put_line(emp2||'>>NO SUCH EMPLOYEE NUMBER');
		end;
	end;
	
	

exception
when no_data_found then
	dbms_output.put_line(emp1||'  and  '||emp2||'  NO SUCH EMPLOYEE NUMBERS');

end;




Practice 5
Write a PLSQL block which takes Movie booking details as input from the user and inserts a record in the booking table after doing the following validation
o	Book_id should be unique
o	Want to book for today 
o	Person_booked is the user itself
o	theartre_id, movie_id, show_id should be valid
o	No_of_tickets are 2

Raise a user defined exception for each of the above validations, display appropriate error message and terminate the program

THEATRE_ID THEATRE_NAME  ADDRESS  LOCALITY CITY
BOOK_ID BOOKING_D PERSON_BOOKED   THEARTRE_I MOVIE_ID      SHOW_ID NO_OF_TICKETS


				
----
